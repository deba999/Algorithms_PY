'''
**THEORY**
1. only works on integers
2. we should know the range of inputs(i.e K) and it should not be too wide i.e range should not be >  n. 

time complexity =  O(n+k)   {n: number of items in the array  k=range} 
                == O(n)      if k is proportional to n i.e k<=next
				
space time complexity=O(n+k) == o(n)

out-of place  (as requires an extra count array)
stable        (i.e maitains the order of the array elemtns as they have appeared)
internal
non-comparison algorithm and non-recursive

'''
##############################################################################################FILE

def countingSort(a,k):
    op=[0 for i in range(len(a))]
    count=[0 for i in range(k+1)]

    #count the occurance of each char
    for i in range(len(a)):
        count[a[i]]+=1
    #print(count)
    # find the sum by adding current with the previos element : index to store the element
    for i in range(1,k):
        count[i]+=count[i-1]
    #print(count)

    #now store in the output array with the help of indices in the count
    for i in range(len(a)):
        op[count[a[i]]-1]=a[i]
        count[a[i]]-=1

    return op


a=[534,246,933, 127,277,321,454,565,220]
k=1000
print(countingSort(a,k))


####################################################################################3
'''
for -ve integers : 
1.calculate range(i.e max-min+1), allocate count array and do same
2.but for -ve ints,as we don't have -ve indices, make them +ve by subtracting with min element
  i.e arr[i]-min 
'''
