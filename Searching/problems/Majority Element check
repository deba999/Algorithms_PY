Majority Element
Write a function which takes an array and prints the majority element (if it exists), otherwise prints “No Majority Element”. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element).
Examples :

Input : {3, 3, 4, 2, 4, 4, 2, 4, 4}
Output : 4 

Input : {3, 3, 4, 2, 4, 4, 2, 4}
Output : No Majority Element

#####Method 1: NEsted for loops ( O(n^2))
        def findMajority(arr,n):
            max=0
            ele=0
            for i in range(n):
                c=1
                for j in range(i+1,n):
                    if arr[i]==arr[j]:
                        c+=1
                if max<c:
                    max=c
                    ele=arr[i]
            #print(max,ele)
            if max>(n//2):
                print("MAJORITY ELEMENT :",ele)
            else:
                print('No Such Element')

###MEthod2 :  (Using Moore’s Voting Algorithm)
This is a two step process.
NOTE : This Method only works when we are given that majority element do exist in the array , otherwise this method won’t work , as in the problem definition we said that majority element may or may not exist but for applying this approach you can assume that majority element do exist in the given input array

The first step gives the element that may be majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise it will return candidate for majority element.
Check if the element obtained from above step is majority element.This step is necessary as we are not always sure that element return by first step is majority element.
1. Finding a Candidate :
The algorithm for first phase that works in O(n) is known as Moore’s Voting Algorithm. Basic idea of the algorithm is that if we cancel out each occurrence of an element e with all the other elements that are different from e then e will exist till end if it is a majority element.

        findCandidate(a[], size)
        1.  Initialize index and count of majority element
             maj_index = 0, count = 1
        2.  Loop for i = 1 to size – 1
            (a) If a[maj_index] == a[i]
                  count++
            (b) Else
                count--;
            (c) If count == 0
                  maj_index = i;
                  count = 1
        3.  Return a[maj_index]
Above algorithm loops through each element and maintains a count of a[maj_index]. If the next element is same then increment the count, if the next element is not same then decrement the count, and if the count reaches 0 then changes the maj_index to the current element and set the count again to 1. So, the first phase of the algorithm gives us a candidate element.
In the second phase we need to check if the candidate is really a majority element. Second phase is simple and can be easily done in O(n). We just need to check if count of the candidate element is greater than n/2.

2. Check if the element obtained in step 1 is majority element or not :
        printMajority (a[], size)
        1.  Find the candidate for majority
        2.  If candidate is majority. i.e., appears more than n/2 times.
               Print the candidate
        3.  Else
               Print "No Majority Element"
  
  
        def findCandidate(A): 
    maj_index = 0
    count = 1
    for i in range(len(A)): 
        if A[maj_index] == A[i]: 
            count += 1
        else: 
            count -= 1
        if count == 0: 
            maj_index = i 
            count = 1
    return A[maj_index] 
  
# Function to check if the candidate occurs more than n/2 times 
def isMajority(A, cand): 
    count = 0
    for i in range(len(A)): 
        if A[i] == cand: 
            count += 1
    if count > len(A)/2: 
        return True
    else: 
        return False
   
   Time Complexity: O(n)
    Auxiliary Space : O(1)

 
      
 Method 3: Hashing
 
         def find2(arr,n):
            d={}
            for i in arr:
                d.setdefault(i,0)
                d[i]+=1
            for k in d:
                if d[k]>(n//2):
                    print("MAJORITY ELEMENT :",k)
                    return
            print("No elements are there")

Time Complexity: O(n)
Auxiliary Space : O(n)

 
