#Medians of 2 sorted arrays

#Approach 1 : merge
'''
time complexity is o(n), but space complexity is o(n)
but we can redcue to o(1) by keeping the mid and mid-1 element in storage instead of
whole array.
'''
def merge(a,b):
        i,j,k=0,0,0
        la,lb=len(a),len(b)
        c=[0]*(la+lb)
        
        while i<la and j<lb:
                if a[i]<=b[j]:
                        c[k]=a[i]
                        k+=1
                        i+=1
                else:
                        c[k]=b[j]
                        k+=1
                        j+=1
        while i<la:
                c[k]=a[i]
                k+=1
                i+=1
                
        while j<lb:
                c[k]=b[j]
                k+=1
                j+=1
        t=la+lb
        avg=0
        print(sorted(c))
        if t%2==0:
                avg=(c[t//2-1]+c[t//2])/2
        else:
                avg=c[t//2]

        return avg

#time complexity is o(n), but space complexity is o(1)
def merge1(a,b):
        i,j,k=0,0,0
        la,lb=len(a),len(b)
        m1,m2=-1,-1
        mid=(la+lb)//2
        
        while i<la and j<lb:
                if a[i]<=b[j]:
                        if k==mid-1:
                                m1=a[i]
                        if k==mid:
                                m2=a[i]
                                break   
                        k+=1
                        i+=1
                else:
                        if k==mid-1:
                                m1=b[j]
                        if k==mid:
                                m2=b[j]
                                break   
                        k+=1
                        j+=1
        while i<la:
                if k==mid-1:
                        m1=a[i]
                if k==mid:
                        m2=a[i]
                        break   
                k+=1
                i+=1
                
        while j<lb:
                if k==mid-1:
                        m1=b[j]
                if k==mid:
                        m2=b[j]
                        break   
                k+=1
                j+=1

        t=la+lb
        avg=0
        
        if t%2==0:
                avg=(m1+m2)/2
        else:
                avg=m2/2

        return avg
def search(a,b):
        if len(a)>len(b):
                a,b=b,a
        x=len(a)
        y=len(b)

        l=0
        h=x

        while l<=h :
                px=(l+h)//2
                py=(l+h+1)//2 -px

        maxLeftx=a[px-1] if px>0 else float('-inf')
        minRightx=float('inf') if px==x else a[px]

        maxLefty=b[py-1] if py>0 else float('-inf')
        minRighty=float('inf') if py==y else b[py]

        if maxLeftx<=minRighty and maxLefty<=minRightx:
                if x+y %2==0:
                        return (max(maxLeftX,maxLeftY)+min(minRightx,minRighty))/2
                else:
                        return max(maxLeftX,maxLeft)
        elif maxLeftx>minRightY:
                h=px-1
        else:
                l=px+1

a=[1,3]
b=[2]
print(merge1(a,b))
