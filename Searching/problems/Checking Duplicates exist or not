#method1 NEsted loops O(n^2)
def check(arr,n):
        for i in range(n-1):
                for j in range(i+1,n):
                        if arr[i]==arr[j] :#and arr[i]not in m:
                                print('Duplicate exists')
                                return
        print('No duplicates')

#MEthod2: Sorting O(nlogn)
def check1(arr,n):
        arr.sort()
        for i in range(1,n):
                if arr[i]==arr[i-1]:
                        print('Duplicate exists')
                        return   
        print('No duplicates')

#Method3 : Hashing O(n) but space complexity : O(n)
def check2(arr,n):
        d={}
        for i in arr:
                
                d.setdefault(i,0)
                d[i]+=1

                if d[i] >=2:
                        print('Duplicate exists')
                        return
        print('No duplicates')

#Negation method O(n) : range should be 1 to n and positive
def check4(arr,n):

        for i in range(n):
                if arr[abs(arr[i])] <0:
                        print('Duplicate exists')
                        return
                
                arr[abs(arr[i])]=-arr[abs(arr[i])]
        print('No Duplicates..')
