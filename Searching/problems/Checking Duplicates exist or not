
#method1 NEsted loops O(n^2)
def check(arr,n):
        for i in range(n-1):
                for j in range(i+1,n):
                        if arr[i]==arr[j] :#and arr[i]not in m:
                                print('Duplicate exists')
                                return
        print('No duplicates')


#MEthod2: Sorting O(nlogn)
def check1(arr,n):
        arr.sort()
        for i in range(1,n):
                if arr[i]==arr[i-1]:
                        print('Duplicate exists')
                        return   
        print('No duplicates')


#Method3 : Hashing O(n) but space complexity : O(n)
def check2(arr,n):
        d={}
        for i in arr:
                
                d.setdefault(i,0)
                d[i]+=1

                if d[i] >=2:
                        print('Duplicate exists')
                        return
        print('No duplicates')


#Negation method O(n) : range should be 1 to n and positive
def check4(arr,n):

        for i in range(n):
                if arr[abs(arr[i])] <0:
                        print('Duplicate exists')
                        return
                
                arr[abs(arr[i])]=-arr[abs(arr[i])]
        print('No Duplicates..')

'''
PROBLEM IN CHECK4 METHOD I.E NEGATION METHOD:

IT WILL PRINT THE DUPLICATE ELEMENT MORE THAN ONCE
A=[1, 6, 3, 1, 3, 6, 6}
o.p : 1 3 6 6 #WRONG...
'''


#Method5 : RANGE DIVISION METHOD
'''
1- Traverse the given array from i= 0 to n-1 elements
     Go to index arr[i]%n and increment its value by n.
3- Now traverse the array again and print all those 
   indexes i for which arr[i]/n is greater than 1.

This approach works because all elements are in range
from 0 to n-1 and arr[i]/n would be greater than 1
only if a value "i" has appeared more than once.
'''
def check5(arr,n):
        for i in range(n):
                pos=arr[i]%n
                arr[pos]+=n
        for i in range(n):
                if arr[i]/n >1:
                        print(i,end=' ')
a=[1, 6, 3, 1, 3, 6, 6]
check5(a,len(a))
