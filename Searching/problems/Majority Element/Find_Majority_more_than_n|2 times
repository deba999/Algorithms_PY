#Majority element that appears more than n/2 times

#Method1  : O(n^2)
def findMajority(arr,n):
    m=0
    ele=0
    for i in range(n-1):
        c=0
        for j in range(n):
            if arr[i]==arr[j]:
                c+=1
        if c>m:
            ele=arr[i]
            m=c

    if m>(n/2):
        print(ele)
    else:
        print('No Majority Element..')

#Sorting O(nlgn)
def findMajority2(arr,n):
    arr.sort()

    c=1
    ele=arr[0]
    for i in range(1,n):
        if ele==arr[i] :
            c+=1

            if c > (n//2):
                print(ele)
                return
        else:
            ele=arr[i]
            c=1
    print('No MAjority')

#Method3 Median Method
#Logic : if element appears more that n/2 times , the it must be median of a
#1. use linear selection to find the median 'm' of A
#2. Now count m in Array if count > n/2  => MAJORITY

    
#Method4 Hashing
def findMajority4(arr,n):
    d={}

    for i in arr:
        d.setdefault(i,0)
        d[i]+=1

    for i in d:
        if d[i] >(n//2):
            print(i)
            return
    print('No Majority')

#Method5 Moore's Voting Algo  >>>>>>BEST ONE
def findMajority5(arr,n):
    maj=arr[0]
    c=1

    #Finding the Candidate
    for i in range(1,n):
        if arr[i]==maj:
            c+=1
        else:
            c-=1

        if c==0:
            c=1
            maj=arr[i]
            
     '''
     #We can modify above code in compact form
             maj=0
             c=0
             for i in range(0,n):
                if arr[i]==maj or c==0:
                    c+=1
                    maj=arr[i]
                else:
                    c-=1
    
     '''

    #checking if it ocurrs n//2+1 times or not
    x=arr.count(maj)
    if x>(n//2):
        print(maj)
    else:
        print('No Majority')
    

    
arr = [1, 1, 2, 1, 3, 5, 1] 
n = len(arr)       
findMajority5(arr, n) 
